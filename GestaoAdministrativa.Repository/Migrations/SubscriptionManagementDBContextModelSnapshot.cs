// <auto-generated />
using System;
using Gestao_Administrativa.Repository.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Gestão_Administrativa.Migrations
{
    [DbContext(typeof(SubscriptionManagementDBContext))]
    partial class SubscriptionManagementDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.AddressModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("CEP")
                        .HasColumnType("integer")
                        .HasColumnName("cep");

                    b.Property<int?>("IdCustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_customer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("IdCustomer"));

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.HasKey("Id");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.ContactModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("contact_info");

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("contact_type");

                    b.HasKey("Id");

                    b.ToTable("contact", (string)null);
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.ContractModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric")
                        .HasColumnName("discount");

                    b.Property<int>("DueDate")
                        .HasColumnType("integer")
                        .HasColumnName("due_date");

                    b.Property<int>("IdCustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_customer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCustomer"));

                    b.Property<int>("IdEquipment")
                        .HasColumnType("integer");

                    b.Property<int>("IdStatus")
                        .HasColumnType("integer")
                        .HasColumnName("id_status");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdStatus"));

                    b.Property<int>("IdSubscription")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_subscription");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSubscription"));

                    b.Property<decimal>("Increase")
                        .HasColumnType("numeric")
                        .HasColumnName("increase");

                    b.HasKey("Id");

                    b.HasIndex("IdStatus");

                    b.ToTable("contract", (string)null);
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.CustomerAddressModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("IdAddress")
                        .HasColumnType("integer")
                        .HasColumnName("id_contact");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAddress"));

                    b.Property<int>("IdCustomer")
                        .HasColumnType("integer")
                        .HasColumnName("id_customer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCustomer"));

                    b.HasKey("Id");

                    b.HasIndex("IdAddress");

                    b.ToTable("customer_address", (string)null);
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.CustomerContactModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("IdContact")
                        .HasColumnType("integer")
                        .HasColumnName("id_contact");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdContact"));

                    b.Property<int>("IdCustomer")
                        .HasColumnType("integer")
                        .HasColumnName("id_customer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCustomer"));

                    b.HasKey("Id");

                    b.HasIndex("IdContact");

                    b.ToTable("customer_contact", (string)null);
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.CustomerContractModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("IdContract")
                        .HasColumnType("integer")
                        .HasColumnName("id_contract");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdContract"));

                    b.Property<int>("IdCustomer")
                        .HasColumnType("integer")
                        .HasColumnName("id_customer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCustomer"));

                    b.HasKey("Id");

                    b.HasIndex("IdContract");

                    b.ToTable("customer_contract", (string)null);
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.CustomerModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("CpfCnpj")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IdAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_address");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAddress"));

                    b.Property<int?>("IdContact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_contact");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("IdContact"));

                    b.Property<int?>("IdContract")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_contract");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("IdContract"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cpf_cnpj");

                    b.HasKey("Id");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.StatusContractModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("status_contract", (string)null);
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.SubscriptionContractModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("IdContract")
                        .HasColumnType("integer")
                        .HasColumnName("id_contract");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdContract"));

                    b.Property<int>("IdSubscription")
                        .HasColumnType("integer")
                        .HasColumnName("id_subscription");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSubscription"));

                    b.HasKey("Id");

                    b.HasIndex("IdContract");

                    b.HasIndex("IdSubscription");

                    b.ToTable("subscription_contract", (string)null);
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.SubscriptionModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("Down")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("down");

                    b.Property<int?>("IdSubscriptionType")
                        .HasColumnType("integer")
                        .HasColumnName("id_subscription_type");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("IdSubscriptionType"));

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("Up")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("up");

                    b.HasKey("Id");

                    b.HasIndex("IdSubscriptionType");

                    b.ToTable("subscription", (string)null);
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.SubscriptionTypeModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("subscription_type", (string)null);
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.ContractModel", b =>
                {
                    b.HasOne("Gestao_Administrativa.Domain.Models.StatusContractModel", "Status")
                        .WithMany("Contracts")
                        .HasForeignKey("IdStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.CustomerAddressModel", b =>
                {
                    b.HasOne("Gestao_Administrativa.Domain.Models.AddressModel", "Address")
                        .WithMany("Customers")
                        .HasForeignKey("IdAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestao_Administrativa.Domain.Models.CustomerModel", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("IdAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.CustomerContactModel", b =>
                {
                    b.HasOne("Gestao_Administrativa.Domain.Models.ContactModel", "Contact")
                        .WithMany("Customers")
                        .HasForeignKey("IdContact")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestao_Administrativa.Domain.Models.CustomerModel", "Customer")
                        .WithMany("Contacts")
                        .HasForeignKey("IdContact")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.CustomerContractModel", b =>
                {
                    b.HasOne("Gestao_Administrativa.Domain.Models.ContractModel", "Contract")
                        .WithMany("Customers")
                        .HasForeignKey("IdContract")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestao_Administrativa.Domain.Models.CustomerModel", "Customer")
                        .WithMany("Contracts")
                        .HasForeignKey("IdContract")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.SubscriptionContractModel", b =>
                {
                    b.HasOne("Gestao_Administrativa.Domain.Models.ContractModel", "Contract")
                        .WithMany("Subscriptions")
                        .HasForeignKey("IdContract")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestao_Administrativa.Domain.Models.SubscriptionModel", "Subscription")
                        .WithMany("Contracts")
                        .HasForeignKey("IdSubscription")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.SubscriptionModel", b =>
                {
                    b.HasOne("Gestao_Administrativa.Domain.Models.SubscriptionTypeModel", "SubscriptionType")
                        .WithMany("Subscriptions")
                        .HasForeignKey("IdSubscriptionType");

                    b.Navigation("SubscriptionType");
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.AddressModel", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.ContactModel", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.ContractModel", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.CustomerModel", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Contacts");

                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.StatusContractModel", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.SubscriptionModel", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Gestao_Administrativa.Domain.Models.SubscriptionTypeModel", b =>
                {
                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
